name: Build

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:

  createrelease:
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
    permissions: write-all
    name: Create Release
    runs-on: [ubuntu-20.04]
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v3
      with:
        name: release_url
        path: release_url.txt

  build:
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
    permissions: write-all
    name: Build packages for ${{ matrix.os }}
    needs: createrelease
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          #- os: ubuntu-20.04
          #  TARGET: linux
          #  CMD_BUILD: pyinstaller -F -w -n main main.py
          #  OUT_FILE_NAME: main
          #  BINARIES_FILE_NAME: binaries_linux.zip
          #  ASSET_MIME: application/x-executable
          #- os: macos-latest
          #  TARGET: macos
          #  CMD_BUILD: >
          #      pyinstaller -F -w -n main main.py &&
          #      cd dist/ &&
          #      zip -r9 main main.app/                
          #  OUT_FILE_NAME: main.zip
          #  ASSET_MIME: application/zip
          - os: windows-latest
            TARGET: windows
            CMD_BUILD: pyinstaller -F --console -n main main.py
            OUT_FILE_NAME: main.exe
            BINARIES_FILE_NAME: binaries_windows.zip
            ASSET_MIME: application/vnd.microsoft.portable-executable
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.6.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.6.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
    - name: Get commit SHA
      id: get_commit
      run: echo "COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV
    - name: Replace version and commit in script
      run: |
          sed -i "s/__VERSION__/${{env.VERSION}}/g" main.py
          sed -i "s/__COMMIT__/${{env.COMMIT}}/g" main.py
    - name: Build with pyinstaller for ${{matrix.TARGET}}
      run: ${{matrix.CMD_BUILD}}

    # New steps to collect binaries and create a zip archive
    - name: Download all binaries as wheels
      run: |
        mkdir -p wheels
        pip download --dest wheels -r requirements.txt
    - name: Zip the wheel files (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Compress-Archive -Path wheels\* -DestinationPath ${{matrix.BINARIES_FILE_NAME}}
    - name: Zip the wheel files (Linux)
      if: matrix.os == 'ubuntu-20.04'
      run: zip -r ${{matrix.BINARIES_FILE_NAME}} wheels

    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: ./release_url
    - name: Get Release File Name & Upload URL
      id: get_release_info
      shell: bash
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        upload_url: ${{steps.get_release_info.outputs.upload_url}}
        asset_path: ./dist/${{matrix.OUT_FILE_NAME}}
        asset_name: ${{matrix.OUT_FILE_NAME}}
        asset_content_type: ${{matrix.ASSET_MIME}}

    # Upload the binaries zip file as a release asset
    - name: Upload Binaries Zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        upload_url: ${{steps.get_release_info.outputs.upload_url}}
        asset_path: ${{matrix.BINARIES_FILE_NAME}}
        asset_name: ${{matrix.BINARIES_FILE_NAME}}
        asset_content_type: application/zip

  docker:
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
    permissions: write-all
    name: Build packages for Opensuse SLES 15.2
    needs: createrelease
    runs-on: ubuntu-latest
    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for all tags

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
  
    - name: Get commit SHA
      id: get_commit
      run: echo "COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV

    # Step 2: Set up Docker Buildx (optional for multi-architecture support)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Build the Docker image
    - name: Build Docker image
      run: docker build -t local-build .

    # Step 4: Run Docker container with version and commit as arguments
    - name: Run Docker container and execute pipeline
      run: |
        mkdir -p dist  # Ensure dist directory exists for volume mount
        docker run -v ${{ github.workspace }}/dist:/app/dist local-build /bin/bash ./run_pipeline.sh ${{ env.VERSION }} ${{ env.COMMIT }}

    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: ./release_url

    - name: Get Release File Name & Upload URL
      id: get_release_info_2
      shell: bash
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value

    - name: Upload dist/binaries_linux.zip to release
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{steps.get_release_info_2.outputs.upload_url}}
          asset_path: ./dist/binaries_linux.zip
          asset_name: binaries_linux.zip
          asset_content_type: application/zip

    - name: Upload dist/main to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{steps.get_release_info_2.outputs.upload_url}}
        asset_path: ./dist/main
        asset_name: main
        asset_content_type: application/x-executable